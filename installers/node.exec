#!/usr/bin/env bash

section "Checking NVM installation"
if [ ! -d "$HOME/.nvm" ]; then
  info "Installing NVM"
  if [[ $(git clone git://github.com/creationix/nvm.git ~/.nvm >/dev/null 2>&1) -eq 0 ]]; then
    success "Installed NVM"
  fi
fi

# Make sure NVM is available
status "Loading NVM"
source $HOME/.nvm/nvm.sh

status "Setting the latest stable Node as default"
for node in $(nvm ls | ack "v([0-9\.]+)" --output="\$1" | sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n | uniq); do
  majorversion=$(echo $node | ack "^[0-9]+\.([0-9]+)" --output="\$1")
  remainer=$(( $majorversion % 2 ))
  if [ $remainer -eq 0 ]; then
    lateststable=$node
  fi
done
if [ -n "$lateststable" ]; then
  if [[ $(nvm alias default "$lateststable" >/dev/null) -eq 0 ]]; then
    success "Set $lateststable as default Node"
  fi
fi

section "Checking NPM packages"
cached_npm_list=$(npm ls --parseable --global)
for package in "coffee-script" "use-impromptu" "grunt-cli" "sparkfile" "express" "nodemon"; do
  status "Checking $package"
  echo $cached_npm_list | ack "$(dirname $NVM_PATH)/node_modules/$package\b" >/dev/null && success "$package already installed" || {
    info "Installing $package from NPM"
    if [[ $(npm install -g $package >/dev/null 2>&1) -eq 0 ]]; then
      success "Installed $package"
    fi
  }
done

